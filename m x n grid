def minPathSum(grid):
    rows = len(grid)
    cols = len(grid[0])

    # Initialize a DP array to store the minimum sum required to reach each cell
    dp = [[0] * cols for _ in range(rows)]

    # Base case: Initialize the top-left cell
    dp[0][0] = grid[0][0]

    # Initialize the first row: Only possible movement is right
    for j in range(1, cols):
        dp[0][j] = dp[0][j - 1] + grid[0][j]

    # Initialize the first column: Only possible movement is down
    for i in range(1, rows):
        dp[i][0] = dp[i - 1][0] + grid[i][0]

    # Fill in the DP array for the rest of the cells
    for i in range(1, rows):
        for j in range(1, cols):
            # Minimum sum to reach cell (i, j) is the minimum of sum to reach from above and from left, plus current cell's value
            dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j]

    # Return the minimum sum required to reach the bottom-right cell
    return dp[rows - 1][cols - 1]

# Example usage
grid = [
    [1, 3, 1],
    [1, 5, 1],
    [4, 2, 1]
]
print(minPathSum(grid))  # Output should be 7
