def minDistance(word1, word2):
    m, n = len(word1), len(word2)

    # Initialize a DP array to store the minimum number of operations required to convert substrings word1[:i] to word2[:j]
    dp = [[0] * (n + 1) for _ in range(m + 1)]

    # Base cases: Initialize the first row and first column
    for i in range(m + 1):
        dp[i][0] = i
    for j in range(n + 1):
        dp[0][j] = j

    # Fill in the DP array for the rest of the cells
    for i in range(1, m + 1):
        for j in range(1, n + 1):
            if word1[i - 1] == word2[j - 1]:
                dp[i][j] = dp[i - 1][j - 1]  # Characters match, no operation required
            else:
                # Choose the minimum of three operations: Insert, Delete, or Replace
                dp[i][j] = min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1]) + 1

    # Return the minimum number of operations required to convert word1 to word2
    return dp[m][n]

# Example usage
word1 = "horse"
word2 = "ros"
print(minDistance(word1, word2))  # Output should be 3
