def findMedianSortedArrays(nums1, nums2):
    total_length = len(nums1) + len(nums2)
    if total_length % 2 == 0:
        # If the total length is even, median is the average of two middle elements
        return (findKthElement(nums1, nums2, total_length // 2) + findKthElement(nums1, nums2, total_length // 2 - 1)) / 2.0
    else:
        # If the total length is odd, median is the middle element
        return findKthElement(nums1, nums2, total_length // 2)

def findKthElement(nums1, nums2, k):
    if len(nums1) > len(nums2):
        return findKthElement(nums2, nums1, k)
    
    if not nums1:
        return nums2[k]
    
    if k == 0:
        return min(nums1[0], nums2[0])
    
    partition1 = min(k // 2, len(nums1) - 1)
    partition2 = k - partition1 - 1

    if nums1[partition1] < nums2[partition2]:
        return findKthElement(nums1[partition1 + 1:], nums2, k - partition1 - 1)
    elif nums1[partition1] > nums2[partition2]:
        return findKthElement(nums1, nums2[partition2 + 1:], k - partition2 - 1)
    else:
        return nums1[partition1]

# Example usage:
nums1 = [1, 3]
nums2 = [2]
print(findMedianSortedArrays(nums1, nums2))  # Output: 2.0
